//
// UserDeviceAPI.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UserDeviceAPI {

    let client: SafehealthPushClient

    public init(client: SafehealthPushClient) {
        self.client = client
    }

    /**
     Creates a UserDevice entity.
     
     - parameter userDevice: (body) Represents a device used by the legacy push notification system. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createSync(userDevice: UserDevice? = nil, apiResponseQueue: DispatchQueue = SafehealthPushAPI.apiResponseQueue, completion: @escaping ((_ data: UserDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return createWithRequestBuilder(userDevice: userDevice).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Creates a UserDevice entity.
     
     - parameter userDevice: (body) Represents a device used by the legacy push notification system. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func createAsyncMappedParams(userDevice: UserDevice? = nil) async throws -> UserDevice {
        return try await withCheckedThrowingContinuation { continuation in
            createWithRequestBuilder(userDevice: userDevice).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Creates a UserDevice entity.
     
     - parameter userDevice: (body) Represents a device used by the legacy push notification system. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func create(
        id: String? = nil, 
        createdAt: Date? = nil, 
        updatedAt: Date? = nil, 
        deviceId: String? = nil, 
        appVersion: String? = nil, 
        deviceModel: String? = nil, 
        deviceToken: String? = nil, 
        deviceType: String? = nil, 
        idfaId: String? = nil, 
        isLoggedIn: Bool? = nil, 
        osVersion: String? = nil, 
        voipToken: String? = nil, 
        userId: String? = nil, 
        tenantId: String? = nil, 
        userUUID: String? = nil, 
        nationalHealthId: String? = nil, 
        language: String? = nil
    ) async throws -> UserDevice {
        let userDevice = UserDevice(
            id: id,
            createdAt: createdAt,
            updatedAt: updatedAt,
            deviceId: deviceId,
            appVersion: appVersion,
            deviceModel: deviceModel,
            deviceToken: deviceToken,
            deviceType: deviceType,
            idfaId: idfaId,
            isLoggedIn: isLoggedIn,
            osVersion: osVersion,
            voipToken: voipToken,
            userId: userId,
            tenantId: tenantId,
            userUUID: userUUID,
            nationalHealthId: nationalHealthId,
            language: language
        )
        return try await withCheckedThrowingContinuation { continuation in
            createWithRequestBuilder(userDevice: userDevice).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Creates a UserDevice entity.
     
     - parameter userDevice: (body) Represents a device used by the legacy push notification system. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func create(
        id: String? = nil, 
        createdAt: Date? = nil, 
        updatedAt: Date? = nil, 
        deviceId: String? = nil, 
        appVersion: String? = nil, 
        deviceModel: String? = nil, 
        deviceToken: String? = nil, 
        deviceType: String? = nil, 
        idfaId: String? = nil, 
        isLoggedIn: Bool? = nil, 
        osVersion: String? = nil, 
        voipToken: String? = nil, 
        userId: String? = nil, 
        tenantId: String? = nil, 
        userUUID: String? = nil, 
        nationalHealthId: String? = nil, 
        language: String? = nil
    ) async throws -> UserDevice {
        let userDevice = UserDevice(
            id: id,
            createdAt: createdAt,
            updatedAt: updatedAt,
            deviceId: deviceId,
            appVersion: appVersion,
            deviceModel: deviceModel,
            deviceToken: deviceToken,
            deviceType: deviceType,
            idfaId: idfaId,
            isLoggedIn: isLoggedIn,
            osVersion: osVersion,
            voipToken: voipToken,
            userId: userId,
            tenantId: tenantId,
            userUUID: userUUID,
            nationalHealthId: nationalHealthId,
            language: language
        )
        return try await withCheckedThrowingContinuation { continuation in
            createWithRequestBuilder(userDevice: userDevice).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Creates a UserDevice entity.
     - POST /device
     - API Key:
       - type: apiKey Authorization 
       - name: Identity Access Token
     - API Key:
       - type: apiKey x-sf-account 
       - name: Safe Account
     - API Key:
       - type: apiKey x-sf-tenant 
       - name: Safe Tenant
     - parameter userDevice: (body) Represents a device used by the legacy push notification system. (optional)
     - returns: RequestBuilder<UserDevice> 
     */
    open class func createWithRequestBuilder(
            userDevice: UserDevice? = nil
    ) -> RequestBuilder<UserDevice> {
        let basePath = SafehealthPushAPI.basePath;
        let localVariablePath = "/device"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userDevice)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Authorization", value: SafehealthPushAPI.identityAccessToken)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-sf-account", value: SafehealthPushAPI.safeAccount)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-sf-tenant", value: SafehealthPushAPI.safeTenant)
            let localVariableRequestBuilder: RequestBuilder<UserDevice>.Type = SafehealthPushAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /device")
    }

    /**
     Creates a UserDevice entity.
     - POST /device
     - API Key:
       - type: apiKey Authorization 
       - name: Identity Access Token
     - API Key:
       - type: apiKey x-sf-account 
       - name: Safe Account
     - API Key:
       - type: apiKey x-sf-tenant 
       - name: Safe Tenant
     - parameter userDevice: (body) Represents a device used by the legacy push notification system. (optional)
     - returns: RequestBuilder<UserDevice> 
     */
    open func createWithRequestBuilder(
            userDevice: UserDevice? = nil
    ) -> RequestBuilder<UserDevice> {
        let basePath = self.client.basePath;
        let localVariablePath = "/device"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userDevice)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Authorization", value: self.client.identityAccessToken)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-sf-account", value: self.client.safeAccount)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-sf-tenant", value: self.client.safeTenant)
            let localVariableRequestBuilder: RequestBuilder<UserDevice>.Type = SafehealthPushAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /device")
    }


    /**
     Deletes UserDevice entity by device token.
     
     - parameter deviceToken: (query) Identifying token passed when creating UserDevice. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteSync(deviceToken: String? = nil, apiResponseQueue: DispatchQueue = SafehealthPushAPI.apiResponseQueue, completion: @escaping ((_ data: UserDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteWithRequestBuilder(deviceToken: deviceToken).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deletes UserDevice entity by device token.
     
     - parameter deviceToken: (query) Identifying token passed when creating UserDevice. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func deleteAsyncMappedParams(deviceToken: String? = nil) async throws -> UserDevice {
        return try await withCheckedThrowingContinuation { continuation in
            deleteWithRequestBuilder(deviceToken: deviceToken).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Deletes UserDevice entity by device token.
     
     - parameter deviceToken: (query) Identifying token passed when creating UserDevice. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func delete(
        deviceToken: String? = nil
    ) async throws -> UserDevice {
        return try await withCheckedThrowingContinuation { continuation in
            deleteWithRequestBuilder(deviceToken: deviceToken).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Deletes UserDevice entity by device token.
     
     - parameter deviceToken: (query) Identifying token passed when creating UserDevice. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func delete(
        deviceToken: String? = nil
    ) async throws -> UserDevice {
        return try await withCheckedThrowingContinuation { continuation in
            deleteWithRequestBuilder(deviceToken: deviceToken).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Deletes UserDevice entity by device token.
     - DELETE /device
     - API Key:
       - type: apiKey Authorization 
       - name: Identity Access Token
     - API Key:
       - type: apiKey x-sf-account 
       - name: Safe Account
     - API Key:
       - type: apiKey x-sf-tenant 
       - name: Safe Tenant
     - parameter deviceToken: (query) Identifying token passed when creating UserDevice. (optional)
     - returns: RequestBuilder<UserDevice> 
     */
    open class func deleteWithRequestBuilder(
            deviceToken: String? = nil
    ) -> RequestBuilder<UserDevice> {
        let basePath = SafehealthPushAPI.basePath;
        let localVariablePath = "/device"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "deviceToken": (wrappedValue: deviceToken?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Authorization", value: SafehealthPushAPI.identityAccessToken)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-sf-account", value: SafehealthPushAPI.safeAccount)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-sf-tenant", value: SafehealthPushAPI.safeTenant)
            let localVariableRequestBuilder: RequestBuilder<UserDevice>.Type = SafehealthPushAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "DELETE", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to DELETE /device")
    }

    /**
     Deletes UserDevice entity by device token.
     - DELETE /device
     - API Key:
       - type: apiKey Authorization 
       - name: Identity Access Token
     - API Key:
       - type: apiKey x-sf-account 
       - name: Safe Account
     - API Key:
       - type: apiKey x-sf-tenant 
       - name: Safe Tenant
     - parameter deviceToken: (query) Identifying token passed when creating UserDevice. (optional)
     - returns: RequestBuilder<UserDevice> 
     */
    open func deleteWithRequestBuilder(
            deviceToken: String? = nil
    ) -> RequestBuilder<UserDevice> {
        let basePath = self.client.basePath;
        let localVariablePath = "/device"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "deviceToken": (wrappedValue: deviceToken?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Authorization", value: self.client.identityAccessToken)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-sf-account", value: self.client.safeAccount)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-sf-tenant", value: self.client.safeTenant)
            let localVariableRequestBuilder: RequestBuilder<UserDevice>.Type = SafehealthPushAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "DELETE", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to DELETE /device")
    }

}
