//
// ValidationFailure.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ValidationFailure: Codable, JSONEncodable, Hashable {

    public var propertyName: String?
    public var errorMessage: String?
    public var attemptedValue: AnyCodable?
    public var customState: AnyCodable?
    public var severity: Severity?
    public var errorCode: String?
    public var formattedMessagePlaceholderValues: AnyCodable?

    public init(propertyName: String? = nil, errorMessage: String? = nil, attemptedValue: AnyCodable? = nil, customState: AnyCodable? = nil, severity: Severity? = nil, errorCode: String? = nil, formattedMessagePlaceholderValues: AnyCodable? = nil) {
        self.propertyName = propertyName
        self.errorMessage = errorMessage
        self.attemptedValue = attemptedValue
        self.customState = customState
        self.severity = severity
        self.errorCode = errorCode
        self.formattedMessagePlaceholderValues = formattedMessagePlaceholderValues
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case propertyName
        case errorMessage
        case attemptedValue
        case customState
        case severity
        case errorCode
        case formattedMessagePlaceholderValues
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(propertyName, forKey: .propertyName)
        try container.encodeIfPresent(errorMessage, forKey: .errorMessage)
        try container.encodeIfPresent(attemptedValue, forKey: .attemptedValue)
        try container.encodeIfPresent(customState, forKey: .customState)
        try container.encodeIfPresent(severity, forKey: .severity)
        try container.encodeIfPresent(errorCode, forKey: .errorCode)
        try container.encodeIfPresent(formattedMessagePlaceholderValues, forKey: .formattedMessagePlaceholderValues)
    }
}

