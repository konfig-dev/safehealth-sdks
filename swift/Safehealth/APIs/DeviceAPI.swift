//
// DeviceAPI.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DeviceAPI {

    let client: SafehealthClient

    public init(client: SafehealthClient) {
        self.client = client
    }

    /**
     Deletes the identified device from the specified user's devices.
     
     - parameter userId: (path) Identifies the user to whom the device is associated. 
     - parameter deviceId: (path) Identifies the device to be deleted. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteSync(userId: String, deviceId: String, apiResponseQueue: DispatchQueue = SafehealthAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteWithRequestBuilder(userId: userId, deviceId: deviceId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deletes the identified device from the specified user's devices.
     
     - parameter userId: (path) Identifies the user to whom the device is associated. 
     - parameter deviceId: (path) Identifies the device to be deleted. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func deleteAsyncMappedParams(userId: String, deviceId: String) async throws -> Void {
        return try await withCheckedThrowingContinuation { continuation in
            deleteWithRequestBuilder(userId: userId, deviceId: deviceId).execute { result in
                switch result {
                case .success:
                    continuation.resume(returning: ())
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Deletes the identified device from the specified user's devices.
     
     - parameter userId: (path) Identifies the user to whom the device is associated. 
     - parameter deviceId: (path) Identifies the device to be deleted. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func delete(
        userId: String,
        deviceId: String
    ) async throws -> Void {
        return try await withCheckedThrowingContinuation { continuation in
            deleteWithRequestBuilder(userId: userId, deviceId: deviceId).execute { result in
                switch result {
                case .success:
                    continuation.resume(returning: ())
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Deletes the identified device from the specified user's devices.
     
     - parameter userId: (path) Identifies the user to whom the device is associated. 
     - parameter deviceId: (path) Identifies the device to be deleted. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func delete(
        userId: String,
        deviceId: String
    ) async throws -> Void {
        return try await withCheckedThrowingContinuation { continuation in
            deleteWithRequestBuilder(userId: userId, deviceId: deviceId).execute { result in
                switch result {
                case .success:
                    continuation.resume(returning: ())
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Deletes the identified device from the specified user's devices.
     - DELETE /users/{userId}/devices/{deviceId}
     - API Key:
       - type: apiKey Authorization 
       - name: Identity Access Token
     - API Key:
       - type: apiKey x-sf-account 
       - name: Safe Account
     - API Key:
       - type: apiKey x-sf-tenant 
       - name: Safe Tenant
     - parameter userId: (path) Identifies the user to whom the device is associated. 
     - parameter deviceId: (path) Identifies the device to be deleted. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteWithRequestBuilder(
            userId: String,
            deviceId: String
    ) -> RequestBuilder<Void> {
        let basePath = SafehealthAPI.basePath;
        var localVariablePath = "/users/{userId}/devices/{deviceId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let deviceIdPreEscape = "\(APIHelper.mapValueToPathItem(deviceId))"
        let deviceIdPostEscape = deviceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceId}", with: deviceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Authorization", value: SafehealthAPI.identityAccessToken)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-sf-account", value: SafehealthAPI.safeAccount)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-sf-tenant", value: SafehealthAPI.safeTenant)
            let localVariableRequestBuilder: RequestBuilder<Void>.Type = SafehealthAPI.requestBuilderFactory.getNonDecodableBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "DELETE", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to DELETE /users/{userId}/devices/{deviceId}")
    }

    /**
     Deletes the identified device from the specified user's devices.
     - DELETE /users/{userId}/devices/{deviceId}
     - API Key:
       - type: apiKey Authorization 
       - name: Identity Access Token
     - API Key:
       - type: apiKey x-sf-account 
       - name: Safe Account
     - API Key:
       - type: apiKey x-sf-tenant 
       - name: Safe Tenant
     - parameter userId: (path) Identifies the user to whom the device is associated. 
     - parameter deviceId: (path) Identifies the device to be deleted. 
     - returns: RequestBuilder<Void> 
     */
    open func deleteWithRequestBuilder(
            userId: String,
            deviceId: String
    ) -> RequestBuilder<Void> {
        let basePath = self.client.basePath;
        var localVariablePath = "/users/{userId}/devices/{deviceId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let deviceIdPreEscape = "\(APIHelper.mapValueToPathItem(deviceId))"
        let deviceIdPostEscape = deviceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceId}", with: deviceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Authorization", value: self.client.identityAccessToken)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-sf-account", value: self.client.safeAccount)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-sf-tenant", value: self.client.safeTenant)
            let localVariableRequestBuilder: RequestBuilder<Void>.Type = SafehealthAPI.requestBuilderFactory.getNonDecodableBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "DELETE", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to DELETE /users/{userId}/devices/{deviceId}")
    }


    /**
     Retrieves a pageable list of devices associated with the specified user.
     
     - parameter userId: (path) Identifies the user for whom to retrieve devices. 
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listSync(userId: String, page: Int? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = SafehealthAPI.apiResponseQueue, completion: @escaping ((_ data: DeviceListResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return listWithRequestBuilder(userId: userId, page: page, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves a pageable list of devices associated with the specified user.
     
     - parameter userId: (path) Identifies the user for whom to retrieve devices. 
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func listAsyncMappedParams(userId: String, page: Int? = nil, limit: Int? = nil) async throws -> DeviceListResponse {
        return try await withCheckedThrowingContinuation { continuation in
            listWithRequestBuilder(userId: userId, page: page, limit: limit).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Retrieves a pageable list of devices associated with the specified user.
     
     - parameter userId: (path) Identifies the user for whom to retrieve devices. 
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func list(
        userId: String,
        page: Int? = nil, 
        limit: Int? = nil
    ) async throws -> DeviceListResponse {
        return try await withCheckedThrowingContinuation { continuation in
            listWithRequestBuilder(userId: userId, page: page, limit: limit).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Retrieves a pageable list of devices associated with the specified user.
     
     - parameter userId: (path) Identifies the user for whom to retrieve devices. 
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func list(
        userId: String,
        page: Int? = nil, 
        limit: Int? = nil
    ) async throws -> DeviceListResponse {
        return try await withCheckedThrowingContinuation { continuation in
            listWithRequestBuilder(userId: userId, page: page, limit: limit).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Retrieves a pageable list of devices associated with the specified user.
     - GET /users/{userId}/devices
     - API Key:
       - type: apiKey Authorization 
       - name: Identity Access Token
     - API Key:
       - type: apiKey x-sf-account 
       - name: Safe Account
     - API Key:
       - type: apiKey x-sf-tenant 
       - name: Safe Tenant
     - parameter userId: (path) Identifies the user for whom to retrieve devices. 
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - returns: RequestBuilder<DeviceListResponse> 
     */
    open class func listWithRequestBuilder(
            userId: String,
            page: Int? = nil,
            limit: Int? = nil
    ) -> RequestBuilder<DeviceListResponse> {
        let basePath = SafehealthAPI.basePath;
        var localVariablePath = "/users/{userId}/devices"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "Limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Authorization", value: SafehealthAPI.identityAccessToken)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-sf-account", value: SafehealthAPI.safeAccount)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-sf-tenant", value: SafehealthAPI.safeTenant)
            let localVariableRequestBuilder: RequestBuilder<DeviceListResponse>.Type = SafehealthAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /users/{userId}/devices")
    }

    /**
     Retrieves a pageable list of devices associated with the specified user.
     - GET /users/{userId}/devices
     - API Key:
       - type: apiKey Authorization 
       - name: Identity Access Token
     - API Key:
       - type: apiKey x-sf-account 
       - name: Safe Account
     - API Key:
       - type: apiKey x-sf-tenant 
       - name: Safe Tenant
     - parameter userId: (path) Identifies the user for whom to retrieve devices. 
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - returns: RequestBuilder<DeviceListResponse> 
     */
    open func listWithRequestBuilder(
            userId: String,
            page: Int? = nil,
            limit: Int? = nil
    ) -> RequestBuilder<DeviceListResponse> {
        let basePath = self.client.basePath;
        var localVariablePath = "/users/{userId}/devices"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "Limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Authorization", value: self.client.identityAccessToken)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-sf-account", value: self.client.safeAccount)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-sf-tenant", value: self.client.safeTenant)
            let localVariableRequestBuilder: RequestBuilder<DeviceListResponse>.Type = SafehealthAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /users/{userId}/devices")
    }


    /**
     Stores a new device associated with the specified user. If a device with any matching token(s) already exists for that user, it will be removed.
     
     - parameter userId: (path) Identifies the user to whom this device will be associated. 
     - parameter deviceCreateRequest: (body) Carries all device tokens and information required to deliver notifications to the device. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func storeSync(userId: String, deviceCreateRequest: DeviceCreateRequest? = nil, apiResponseQueue: DispatchQueue = SafehealthAPI.apiResponseQueue, completion: @escaping ((_ data: DeviceCreateResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return storeWithRequestBuilder(userId: userId, deviceCreateRequest: deviceCreateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Stores a new device associated with the specified user. If a device with any matching token(s) already exists for that user, it will be removed.
     
     - parameter userId: (path) Identifies the user to whom this device will be associated. 
     - parameter deviceCreateRequest: (body) Carries all device tokens and information required to deliver notifications to the device. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func storeAsyncMappedParams(userId: String, deviceCreateRequest: DeviceCreateRequest? = nil) async throws -> DeviceCreateResponse {
        return try await withCheckedThrowingContinuation { continuation in
            storeWithRequestBuilder(userId: userId, deviceCreateRequest: deviceCreateRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Stores a new device associated with the specified user. If a device with any matching token(s) already exists for that user, it will be removed.
     
     - parameter userId: (path) Identifies the user to whom this device will be associated. 
     - parameter deviceCreateRequest: (body) Carries all device tokens and information required to deliver notifications to the device. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func store(
        userId: String,
        device: Device? = nil
    ) async throws -> DeviceCreateResponse {
        let deviceCreateRequest = DeviceCreateRequest(
            device: device
        )
        return try await withCheckedThrowingContinuation { continuation in
            storeWithRequestBuilder(userId: userId, deviceCreateRequest: deviceCreateRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Stores a new device associated with the specified user. If a device with any matching token(s) already exists for that user, it will be removed.
     
     - parameter userId: (path) Identifies the user to whom this device will be associated. 
     - parameter deviceCreateRequest: (body) Carries all device tokens and information required to deliver notifications to the device. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func store(
        userId: String,
        device: Device? = nil
    ) async throws -> DeviceCreateResponse {
        let deviceCreateRequest = DeviceCreateRequest(
            device: device
        )
        return try await withCheckedThrowingContinuation { continuation in
            storeWithRequestBuilder(userId: userId, deviceCreateRequest: deviceCreateRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Stores a new device associated with the specified user. If a device with any matching token(s) already exists for that user, it will be removed.
     - POST /users/{userId}/devices
     - API Key:
       - type: apiKey Authorization 
       - name: Identity Access Token
     - API Key:
       - type: apiKey x-sf-account 
       - name: Safe Account
     - API Key:
       - type: apiKey x-sf-tenant 
       - name: Safe Tenant
     - parameter userId: (path) Identifies the user to whom this device will be associated. 
     - parameter deviceCreateRequest: (body) Carries all device tokens and information required to deliver notifications to the device. (optional)
     - returns: RequestBuilder<DeviceCreateResponse> 
     */
    open class func storeWithRequestBuilder(
            userId: String,
            deviceCreateRequest: DeviceCreateRequest? = nil
    ) -> RequestBuilder<DeviceCreateResponse> {
        let basePath = SafehealthAPI.basePath;
        var localVariablePath = "/users/{userId}/devices"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deviceCreateRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Authorization", value: SafehealthAPI.identityAccessToken)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-sf-account", value: SafehealthAPI.safeAccount)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-sf-tenant", value: SafehealthAPI.safeTenant)
            let localVariableRequestBuilder: RequestBuilder<DeviceCreateResponse>.Type = SafehealthAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /users/{userId}/devices")
    }

    /**
     Stores a new device associated with the specified user. If a device with any matching token(s) already exists for that user, it will be removed.
     - POST /users/{userId}/devices
     - API Key:
       - type: apiKey Authorization 
       - name: Identity Access Token
     - API Key:
       - type: apiKey x-sf-account 
       - name: Safe Account
     - API Key:
       - type: apiKey x-sf-tenant 
       - name: Safe Tenant
     - parameter userId: (path) Identifies the user to whom this device will be associated. 
     - parameter deviceCreateRequest: (body) Carries all device tokens and information required to deliver notifications to the device. (optional)
     - returns: RequestBuilder<DeviceCreateResponse> 
     */
    open func storeWithRequestBuilder(
            userId: String,
            deviceCreateRequest: DeviceCreateRequest? = nil
    ) -> RequestBuilder<DeviceCreateResponse> {
        let basePath = self.client.basePath;
        var localVariablePath = "/users/{userId}/devices"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deviceCreateRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "Authorization", value: self.client.identityAccessToken)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-sf-account", value: self.client.safeAccount)
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "x-sf-tenant", value: self.client.safeTenant)
            let localVariableRequestBuilder: RequestBuilder<DeviceCreateResponse>.Type = SafehealthAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /users/{userId}/devices")
    }

}
